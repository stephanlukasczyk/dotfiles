" additional local configuration for haskell-vim-now

" general setting {{{

set softtabstop=2
set shiftwidth=2
set textwidth=80
set expandtab
set backspace=indent,eol,start

match ErrorMsg '\s\+$'
nnoremap <Leader>rtw :%s/\s\+$//e<cr>
if exists('+colorcolumn')
  set cc=+1
  highlight ColorColumn ctermbg=lightgrey guibg=lightgrey
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

set mouse=a
set number
set relativenumber

set laststatus=2
set encoding=utf-8
set t_Co=256

let mapleader = ","
let maplocalleader = ","

filetype on
filetype plugin on
filetype plugin indent on

" }}}

" airline display buffers at top row
let g:airline#extensions#tabline#enabled = 1
" enable powerline fonts
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'

" find/grep magic to speedup ctrl-p
let g:ctrlp_user_command = 'find %s -type f | grep -v -P
      \ "\.git|build\/|\.m4$|\.jpg$|\.png$|\.o$|\.a$|\.so$|\.obj$|\.i$|\.pyc$"
      \ '
map <Leader>t :CtrlP<CR>
" list the files in the current directory
let g:ctrlp_working_path_mode = 'a'

" vim colors
colorscheme solarized
set background=dark

" higlight syntax in programming languages
syntax on

" Completion plugins {{{

" Use deoplete.
let g:deoplete#enable_at_startup=1

let g:deoplete#sources#clang#libclang_path="/usr/lib64/llvm/5/lib64/libclang.so"
let g:deoplete#sources#clang#clang_header="/usr/lib64/clang"

let g:tmuxcomplete#trigger = ''

let g:deoplete#sources#jedi#docstring=1

let g:chromatica#libclang_path='/usr/lib64/llvm/5/lib64/libclang.so'
"let g:chromatica#enable_at_startup=1
let g:chromatica#responsive_mode=1

if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif
if exists('g:vimtex#re#deoplete')
  let g:deoplete#omni#input_patterns.tex = g:vimtex#re#deoplete
endif

" }}}

" rainbox parentheses {{{

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
au Syntax * RainbowParenthesesLoadChevrons
map <leader>R :RainbowParenthesesToggle<cr>

" }}}

" syntastic {{{

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_error_symbol = '☢'
let g:syntastic_warning_symbol = '⚡'
let g:syntastic_style_error_symbol = '☛'
let g:syntastic_style_warning_symbol = '☞'
let g:syntastic_aggregate_errors = 1
let g:sytnastic_enable_balloons = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
map <slient> <Leader>e :Errors<cr>
map <Leader>s :SyntasticToggleMode<cr>

" }}}

" VimTeX {{{

autocmd Filetype tex setlocal ts=2 sts=2 sw=2
autocmd Filetype tex setlocal textwidth=80
autocmd Filetype tex setlocal colorcolumn=81
autocmd Filetype tex setlocal formatoptions+=t
autocmd Filetype plaintex setlocal ts=2 sts=2 sw=2
autocmd Filetype plaintex setlocal textwidth=80
autocmd Filetype plaintex setlocal colorcolumn=80
autocmd Filetype plaintex setlocal formatoptions+=t
autocmd Filetype tex match Error /\%81v.\+/
autocmd Filetype plaintex match Error /\%81v.\+/
let g:tex_flavor = 'latex'
" }}}

" movement {{{
" bind Ctrl+<movement> keys to move around the windows, instead of using
" Leader+w <movement>

map <Leader>j <c-w>j
map <Leader>k <c-w>k
map <Leader>l <c-w>l
map <Leader>h <c-w>h
map <Leader>w <c-w>w
map <Leader>o <c-w>o
map <Leader>q <c-w>q

map <Leader>, <esc>:tabprevious<cr>
map <Leader>. <esc>:tabnext<cr>

" }}}

" custom mappings {{{

vnoremap < <gv " better indentation
vnoremap > >gv " better indentation
map <Leader>a ggVG " select all
map <Leader>n :NERDTree<cr>
map <F5> :setlocal spell! spelllang=en_gb<cr>
map <F6> :setlocal spell! spelllang=de_de<cr>

autocmd FileType python setlocal completeopt-=preview

" }}}

" git configuration {{{

autocmd Filetype gitcommit setlocal spell spelllang=en_gb textwidth=72
autocmd Filetype mail setlocal spell spelllang=de_de textwidth=72

" }}}

" bindings for fzf-vim {{{

nmap <c-p> :FZF<cr>
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
inoremap <expr> <c-x><c-k> fzf#vim#complete#work({'left': '15%'})
nmap <c-x><c-b> :Buffers<CR>

" }}}

" add blinking when jumping to next word for search {{{

nnoremap <silent> n n:call HLNext(0.2)<cr>
nnoremap <silent> N N:call HLNext(0.2)<cr>

function! HLNext (blinktime)
  highlight WhiteOnRed ctermfg=White ctermbg=Red
  let [bufnum, lnum, col, off] = getpos('.')
  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
  let target_pat = '\c\%#\%('.@/.'\)'
  let ring = matchadd('WhiteOnRed', target_pat, 101)
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  call matchdelete(ring)
  redraw
endfunction

" Delete trailing whitespace and tabs at the end of each line
command! DeleteTrailingWs :%s/\s\+$//

" Convert all tab characters to two spaces
command! Untab :%s/\t/  /g

" }}}

" wordy {{{

let g:wordy#ring = [
      \ 'weak',
      \ ['being', 'passive-voice', ],
      \ 'business-jargon',
      \ 'weasel',
      \ 'puffery',
      \ ['problematic', 'redundant', ],
      \ ['colloquial', 'idiomatic', 'similies', ],
      \ 'art-jargon',
      \ ['contractions', 'opinion', 'vague-time', 'said-synonyms', ],
      \ ]
nnoremap <silent> K :NextWordy<cr>
if !&wildcharm | set wildcharm=<C-z> | endif
execute 'nnoremap <leader>w :Wordy<space>'.nr2char(&wildcharm)

" }}}

" ditto {{{

au FileType markdown,text,tex DittoOn
nmap <leader>di <Plug>ToggleDitto
nmap =d <Plug>DittoNext
nmap -d <Plug>DittoPrev
nmap +d <Plug>DittoGood
nmap _d <Plug>DittoBad
nmap ]d <Plug>DittoMore
nmap [d <Plug>DittoLess

" }}}

" nerdtree-git-plugin {{{

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

map <C-n> :NERDTreeToggle<CR>

" }}}
